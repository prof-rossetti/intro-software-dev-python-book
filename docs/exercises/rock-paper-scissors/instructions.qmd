---
number-sections: false
---


# "Rock, Paper, Scissors" Game {.unnumbered}

Develop a Python application which will allow a human user to play a game of Rock-Paper-Scissors against a computer opponent. The game's functionality should adhere to the "Requirements" section below.

For this assignment specifically, all game code should exist in a single cell.

## Requirements

### Welcome Message

The application should instruct the player via text cell to set their name using a [notebook secret](../../notes/dev-tools/google-colab/notebook-secrets.html#implementation) called `PLAYER_NAME`.

The application should read the player name from the notebook secrets, and store the value in a Python variable called `player_name`.

The application should display a friendly message welcoming the user, for example: **"Welcome Jon, to our Rock Paper Scissors Game!"** (if "Jon" was set as the player's name).

### Processing User Inputs

The application should prompt the user to input, or otherwise select, an option (i.e. "rock", "paper", or "scissors"). It should store the user's selection in a variable for later reference.

:::{.callout-tip title="Hint" collapse="true"}
Use the [`input` function](../../notes/python-lang/overview.ipynb#the-input-function) or [form inputs](../../notes/dev-tools/google-colab/form-inputs.ipynb) to capture user inputs. If you use form inputs, that will also satisfy the validation step below.
:::

### Validating User Inputs

The application should compare the user's selection against the list of valid options (i.e. "rock", "paper", "scissors") to determine whether the user has selected a valid option.

#### Graceful Failure

If the selection is invalid, the program should fail gracefully by displaying a friendly message to the user, and preventing further program execution. The program should not try to further process an invalid input, as it may lead to runtime errors.

:::{.callout-tip title="Hint" collapse="true"}
Check the selection option using [conditional logic](../../notes/python-lang/control-flow/conditional-logic.qmd).
:::

#### Case Normalization

The program should be able to handle various capitalizations of the valid options (e.g. "ROCK", "Rock", "rock", "RoCk", etc.) Any combination of capitalization should be considered value.

:::{.callout-tip title="Hint" collapse="true"}
Modify the user input value [string case manipulation](../../notes/python-lang/basic-datatypes/strings.qmd#case-manipulation) before checking the selected option.
:::

#### Validation Loop

If the selection is invalid, the program should continue to prompt the user to input a value until the user inputs a valid input.

:::{.callout-tip title="Hint" collapse="true"}
Ask for an input within the scope of a [`while` loop](../../notes/python-lang/control-flow/while-loops.qmd), and break out of the loop if the selection is valid.
:::


### Simulating Computer Selection

The application should select one of the options (i.e. "rock", "paper", or "scissors") at random, and assign that as the computer player's choice.

:::{.callout-tip title="Hint" collapse="true"}
Use the `choice` function provided by [the `random` module](../../notes/python-modules/random.qmd).

Ensure the valid choices are stored in a [list datatype](../../notes/python-lang/container-datatypes/lists.qmd), and then pass that list to the random choice function.
:::


### Determining the Winner

The application should compare the user's selection to the computer player's selection, and determine which is the winner. The following logic should govern that determination:

  1. Rock beats Scissors
  2. Paper beats Rock
  3. Scissors beats Paper
  4. Rock vs Rock, Paper vs Paper, and Scissors vs Scissors each results in a "tie"

:::{.callout-tip title="Hint" collapse="true"}
Use an [`if` statement](../../notes/python-lang/control-flow/conditional-logic.qmd) or nested `if` statements (recommended approach for beginners).

FYI - it is alternatively possible to use pre-configured representations of the winners, for example using a tuple of the winners, or a nested [dictionary](../../notes/python-lang/container-datatypes/dictionaries.qmd) containing all possible outcomes.
:::

### Displaying Results

After determining the winner, the application should display the results to the user. Desired information outputs (from start to finish) should include at least the following:

  + A friendly welcome message, including the player's name (e.g. "Player One").
  + The user's selected option
  + The computer's selected option
  + Whether the user or the computer was the winner
  + A friendly farewell message

Example desired output after one round of game-play:

```
Welcome 'Player One' to my Rock-Paper-Scissors Game!
---------
Please choose an option ('rock', 'paper', or 'scissors'): rock
---------
User choice: 'rock'
---------
Computer choice: 'scissors'
---------
You won! Thanks for playing.
```

## Evaluation

Submissions will be evaluated according to the "Requirements" section, as represented by the following rubric:

Category | Requirement | Weight
--- | --- | ---
Info Inputs | Reads the player name from notebook secrets. | 10%
Info Inputs | Prompts the user to input or select an option (one of: "rock", "paper", or "scissors"). | 15%
Validations | Handles user inputs of various capitalization. | 15%
Validations | Fails gracefully if encountering an invalid user input. | 15%
Simulation | Generates a random computer choice. | 15%
Calculations | Displays the winner accurately. | 15%
Info Outputs | Displays all desired information. | 15%

This rubric is tentative, and may be subject to slight adjustments during the grading process.

If experiencing execution error(s) while evaluating the application's required functionality, evaluators are advised to reduce the project's grade by between 4% and 25%, depending on the circumstances and severity of the error(s).

## Further Exploration

### Game Loop Challenges

**Play Again**: The application should ask the user whether they'd like to play again. If they say "yes", it should play the game again, otherwise it should stop. The user should be able to continue playing as many games as they want.

:::{.callout-tip title="Hint" collapse="true"}
Use an infinite `while` loop!
:::

**Game Stats**: The application should keep track of how many games have been played, and how many games have been won, and once the user elects to stop playing, display their win percentage.

:::{.callout-tip title="Hint" collapse="true"}
Use a counter approach in conjunction with your `while` loop.
:::
