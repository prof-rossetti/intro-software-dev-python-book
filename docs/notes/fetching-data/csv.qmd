---
format:
  html:
    code-fold: false
jupyter: python3
execute:
  cache: true # re-render only when source changes
---


# Fetching CSV Data


If the data yweou want to fetch is in CSV format, we can use the `pandas` package to fetch and process it.

Let's consider this example \"students.csv\" file we have hosted on the Internet:


```csv
student_id,final_grade
1,76.7
2,85.1
3,50.3
4,89.8
5,97.4
6,75.5
7,87.2
8,88.0
9,93.9
10,92.5
```

First we note the URL of where the data resides. Then we pass that as a parameter to the [`read_csv` function](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html){target=blank} from the `pandas` package, to issue an HTTP GET request:

```{python}
from pandas import read_csv

# the URL of some CSV data we stored online:
request_url = "https://raw.githubusercontent.com/prof-rossetti/intro-software-dev-python-book/main/docs/data/gradebook.csv"

df = read_csv(request_url)
print(type(df))
df
```

The resulting data is a spreadsheet-like object, with rows and columns, called the [`pandas.DataFrame` datatype](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html){target=blank}.

To work with the column of grades, we can access them by specifying the name of the column, which in this case is `"final_grade"`:

```{python}
grades_column = df["final_grade"]
print(type(grades_column))
grades_column
```

The resulting column of grades is a list-like object called the [`pandas.Series` datatype](https://pandas.pydata.org/docs/reference/api/pandas.Series.html){target=blank}.

Calculating the average grade (using series aggregation methods):

```{python}
print(grades_column.mean())
print(grades_column.median())
```
